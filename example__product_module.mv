<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvASSIGN NAME = "l.module:code"		VALUE = "YOURMODULECODE">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Your Super Awesome Module Name">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Your Name">
	<MvASSIGN NAME = "l.module:version"		VALUE = "1.000">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "9.00">
	<MvASSIGN NAME = "l.module:description"	VALUE = "Your Super Awesome Module Description">
	<MvASSIGN NAME = "l.module:features"	VALUE = "data_store, json, clientside, fields_prod, vis_product">
</MvFUNCTION>

<MvCOMMENT>
| ========================================================================================================================
|	DATA STORE FEATURE
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Install_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT> Example Creation of a Table </MvCOMMENT>

	<MvQUERY	NAME = "Merchant"
				QUERY = "{ 'CREATE TABLE ' $  g.Store_Table_Prefix $ 'MYTABLEHERE
								(
									id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									code		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )		$ '
								) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'YOURMODULECODE-INSTALL-0001', g.MvQUERY_Error ) }">
	</MvIF>
	<MvQUERY	NAME = "Merchant"
				QUERY = "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'MYTABLEHERE ON ' $ g.Store_Table_Prefix $ 'MYTABLEHERE ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'YOURMODULECODE-INSTALL-0002', g.MvQUERY_Error ) }">
	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'SOMESTOREKEY', 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'YOURMODULECODE-INSTALL-0003:', 'An error occured while creating the storekey, YOURMODULECODE. Please make sure this does not already exsist.' ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Upgrade_Store" PARAMETERS = "module var, version" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Uninstall_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'MYTABLEHERE' }">
	<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'SOMESTOREKEY' ) }">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvCOMMENT>
| ========================================================================================================================
|	JSON FEATURE
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, compresswhitespace">
	<MvIF EXPR = "{ g.Module_Function EQ 'SOMEFUNCTION' }">
		<MvEVAL EXPR = "{ MyFunction( l.module ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
| ========================================================================================================================
|	CLIENTSIDE
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvCOMMENT>
		<MvIF EXPR = "{ g.Filename EQ 'somefile.js' }">
			<MvINCLUDE FILE = "js/somefile.js">
			Or add all your JS here.
		</MvIF>
	</MvCOMMENT>
</MvFUNCTION>

<MvCOMMENT>
| ========================================================================================================================
|	FIELDS_PROD
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Product_Fields" PARAMETERS = "module var, fields var" STANDARDOUTPUTLEVEL = "">

	<MvASSIGN NAME = "l.fields" INDEX = "1" MEMBER = "code" VALUE = "someCode">
	<MvASSIGN NAME = "l.fields" INDEX = "1" MEMBER = "name" VALUE = "My Custom Product Field 1">
	<MvASSIGN NAME = "l.fields" INDEX = "2" MEMBER = "code" VALUE = "someOtherCode">
	<MvASSIGN NAME = "l.fields" INDEX = "2" MEMBER = "name" VALUE = "My Custom Product Field 2">

	<MvFUNCTIONRETURN VALUE = 2>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Field_Name" PARAMETERS = "module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'someCode' }">
		<MvFUNCTIONRETURN VALUE = "My Custom Product Field 1">
	</MvIF>
	<MvIF EXPR = "{ l.code EQ 'someOtherCode' }">
		<MvFUNCTIONRETURN VALUE = "My Custom Product Field 2">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Field_Value" PARAMETERS = "module var, product_id, code" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
		The return value is the actual value of the field you want to show in the export
		EXAMPLE:
		<MvIF EXPR = "{ l.code EQ 'someCode' }">
			## Logic here to grab the value of 'someCode' for the product with an id of l.product_id
			<MvFUNCTIONRETURN VALUE = "{ 'Whatever my value is' }" />
		</MvIF>
	</MvCOMMENT>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Set_Field" PARAMETERS = "module var, product_id, code, value" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
		If i am using the product import, i can run an update on my fields.
		EXAMPLE:
		<MvIF EXPR = "{ l.code EQ 'someCode' }">
			## Logic here to grab update the value of 'someCode' for the product with an id of l.product_id
			## You will need to check if the value is empty, unless you want to allow an empty field to clear the data.
			## IF THIS FAILS, for whatever reason, you can pass through a function return with a value of 0. If it's successful, you do not need to pass anything.
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvCOMMENT>
</MvFUNCTION>


<MvCOMMENT>
| ========================================================================================================================
| Product
| ========================================================================================================================
</MvCOMMENT>


<MvFUNCTION NAME = "Module_Product_Tabs" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = "MYTAB1:My Tab 1,MYTAB2:My Tab 2">
</MvFUNCTION>


<MvFUNCTION NAME = "Module_Product_Head" PARAMETERS = "module var, tab, product var" STANDARDOUTPUTLEVEL = "html, text">
	<MvIF EXPR = "{ l.tab NE 'MYTAB1' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>
	<MvCOMMENT>
		## This is the head tag of your 'Tab'. If you are using a batchlist, you will want to have all your javascript located here for it.
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_CSS() }">

		## This uses the clientside feature, this is where you would put your javascript files.
		<script language="JavaScript" src="{ g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=MySuperAwesomeBatchlist_functions.js&product_id=' $ l.product:id }"></script>
		<script language="JavaScript" src="{ g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=MySuperAwesomeBatchlist.js&product_id=' $ l.product:id }"></script>
		<script language="JavaScript">
			MMScreen_LoadFinished( function() { new MySuperAwesomeBatchlist_Batchlist(); } );
		</script>
	</MvCOMMENT>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>


<MvFUNCTION NAME = "Module_Product_Content" PARAMETERS = "module var, tab, load_fields, product var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab NE 'MYTAB1' }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_HTML() }">
		<div id="MySuperAwesomeBatchlist_Batchlist_id"></div>
		<MvFUNCTIONRETURN VALUE = 1 />
	</MvIF>
	<MvIF EXPR = "{ l.tab NE 'MYTAB2' }">
		Tab 2 content!! :)
		<MvFUNCTIONRETURN VALUE = 1 />
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvCOMMENT>
# The functions below will allow you to run code on product update, insert, or delete. Validate function is used to validate anything you need.
# example: i am entering a year for my product, your validation function could make sure it is actually a year and not just text.
# this will allow you to have access to the product (basic information, like code, id, name, etc.). Any global variables passed you will have access too.
# If you are using a batchlist, you most likely will not need to use this.
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Product_Update" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Insert" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Delete" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
